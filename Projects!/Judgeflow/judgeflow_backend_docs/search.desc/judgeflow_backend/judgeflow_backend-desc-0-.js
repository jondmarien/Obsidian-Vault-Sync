searchState.loadedDescShard("judgeflow_backend", 0, "Judgeflow Backend\nConstants Module\nData Models Module\nMiddleware Module\nRoute Models Module\nRoutes Module\nServices Module\nUtilities Module\nA lazily initialized set of allowed CORS origins for the …\nEnvironment variable name for the Supabase public API key.\nEnvironment variable name for the Supabase service role …\nEnvironment variable name for the Supabase project URL.\nEligibility Check Models\nHackathon Management Models\nProject Management Models\nUser Management Models\nWaitlist Management Models\nEvaluation status for an eligibility criterion.\nRequest structure for batch processing eligibility checks …\nParticipant data structure for eligibility verification.\nComplete eligibility assessment for a participant.\nResult of evaluating a single eligibility criterion.\nParticipant does not meet this requirement\nUnable to determine automatically; needs human review\nParticipant meets this requirement\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCore entity representing a hackathon event.\nData Transfer Object for hackathon operations.\nA competitive category within a hackathon with specific …\nData Transfer Object for prize track operations.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProject has been fully evaluated and scored. All judging …\nProject has been disqualified from the competition. This …\nProject requires additional review by organizers. May …\nProject is currently being evaluated by judges. No further …\nProject has been submitted but not yet reviewed. This is …\nA hackathon project submission with all associated …\nData Transfer Object for project operations.\nLifecycle status of a hackathon project.\nTechnologies used to build the project.\nTimestamp when the project was created.\nDemo video or live demo link.\nDescription of the project.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAssociated hackathon ID.\nUnique identifier for the project.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nName of the project.\nPrize track IDs this project is submitted to.\nStatus of the project.\nSubmission link (e.g., GitHub repo).\nID of the user who submitted the project.\nIDs of team members.\nAssociated discussion thread ID.\nLinks to try out the project.\nFull system administrator with all permissions\nJudge who evaluates projects\nHackathon organizer with management capabilities\nDefines the possible roles a user can have within the …\nEvent sponsor with special access\nUser with no specific role assigned\nCore user entity representing an individual’s account.\nData Transfer Object for user information.\nRepresents a user’s interests in the system.\nAssociates a user with a role in a specific hackathon.\nRepresents a user’s skills in the system.\nClerk UID of the user from the authentication provider.\nTimestamp when the user was created.\nTimestamp when the user was created.\nWhen the skills were last updated\nWhen the interests were last updated\nTimestamp when the role was assigned.\nValidates that a NaiveDateTime is not too far in the past …\nEmail address of the user.\nEmail address of the user.\nFirst name of the user.\nFirst name of the user.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAssociated hackathon ID.\nIDs of hackathons associated with the user.\nList of hackathon IDs the user is associated with.\nUnique identifier for the user.\nUnique identifier for the user.\nURL to the user’s profile image (must be a valid URL if …\nOptional URL of the user’s profile picture (stored in …\nList of the user’s interests.\nComma-separated list of interests (e.g., “…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast name of the user.\nLast name of the user.\nAssigned role within this hackathon.\nList of skills the user has.\nComma-separated list of skills (e.g., “…\nUser’s professional specialty or expertise area.\nUser’s professional specialty or expertise area.\nReference to the user (as UUID).\nReference to the user\nReference to the user\nUsername of the user.\nUsername of the user.\nValidates that a NaiveDateTime is not too far in the past …\nValidates that a UUID is not nil\nModel for storing waitlist entries\nDatabase record for a waitlist entry with system-generated …\nStandardized response for waitlist-related operations.\nTimestamp when the user joined the waitlist.\nEmail address for the waitlist entry\nEmail address of the user on the waitlist.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for the waitlist entry.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessage describing the outcome of the operation.\nIndicates whether the operation was successful.\nAuthentication Middleware\nJWT claims as issued by Clerk.\nAxum middleware for authenticating requests using Clerk …\nAuthorization Profile (optional).\nExpiration time of the JWT (Unix timestamp).\nExtracts the JWT token from the Authorization header.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNot-before time of the JWT (Unix timestamp).\nSession ID for tracking user sessions.\nSubject (user ID) of the JWT.\nValidates a JWT token against the provided public key and …\nDevpost Integration Models\nDiscord Integration Models\nData Import Models\nResource Models\nS3/Spaces Configuration Models\nSynchronization Models\nWebhook Models\nRepresents a project imported from Devpost.\nResult of a Devpost profile scrape operation\nRequest parameters for initiating a Devpost profile …\nResult of a user lookup operation for Devpost data.\nIndicates whether the user’s Devpost data has already …\nThe timestamp when this project was imported into the …\nA detailed description of the project. This may include …\nAn optional email address that can be used to look up the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique database identifier for the project. This is …\nList of interests extracted from the profile\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe user’s self-reported location from their Devpost …\nOptional message providing additional context\nThe user’s full name as displayed on their Devpost …\nURL of the user’s Devpost profile image\nA list of projects the user has submitted to Devpost. Each …\nA list of skills or technologies the user has listed on …\nList of skills extracted from the profile\nThe title or name of the project. This is typically the …\nThe canonical URL of the project on Devpost. This can be …\nThe full URL of the Devpost profile to be scraped. Should …\nThe UUID of the user who initiated the scraping operation. …\nThe unique identifier of the user in the system. This …\nThe user’s Devpost username (without the devpost.com/ …\nStandardized response format for Discord-related …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA human-readable message describing the operation’s …\nIndicates whether the operation was successful.\nInserts multiple projects into the Supabase database.\nInserts multiple registrants into the Supabase database.\nTransforms project data from external format to …\nTransforms registrant data from external format to …\nRepresents a hackathon event with its associated metadata …\nRepresents the screening and evaluation data for a …\nRepresents a project submission with associated metadata …\nWhen the hackathon record was created.\nDetailed description of the hackathon.\nURL to the Devpost submission page (optional). Must be a …\nNumeric score (0-100) indicating how well the submission …\nWhen the hackathon ends.\nType of event (e.g., “in-person”, “virtual”, “…\nWhether the submission was flagged for further review.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nNumeric score (0-100) for code/idea integrity and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPhysical or virtual location of the event.\nList of user IDs participating in the hackathon.\nName of the hackathon event.\nOptional comments or observations from the screener.\nList of relevant URLs (websites, social media, etc.).\nURL to the source code repository (optional). Must be a …\nTechnical or participation requirements.\nWhen the hackathon begins.\nUnique identifier for the submission being screened.\nTitle of the submission (required). Must be at least 1 …\nURL to a video presentation or demo (optional). Must be a …\nConfiguration for interacting with S3-compatible object …\nThe access key ID for authentication.\nThe name of the S3 bucket to use.\nThe endpoint URL for the S3-compatible service.\nReturns the argument unchanged.\nCreates a new <code>S3Config</code> by reading values from environment …\nCalls <code>U::from(self)</code>.\nThe AWS region where the bucket is located.\nThe secret access key for authentication.\nRepresents an email address in Clerk’s user data.\nRepresents a user object from the Clerk authentication …\nStandardized response format for synchronization …\nTracks the status of a background synchronization task.\nStandardized user data structure for the application’s …\nThe number of items processed during the sync operation, …\nThe user’s primary email address. This is required and …\nThe email address string (e.g., “user@example.com”).\nList of email addresses associated with the user. …\nThe user’s first name, if provided during registration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe user’s full name, if available. This is constructed …\nA unique identifier for the synchronization task. This is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe user’s last name, if provided during registration.\nThe timestamp of when this task was last successfully …\nA human-readable message describing the outcome of the …\nThe user’s role within the application (e.g., “admin”…\nThe current status of the synchronization task. Common …\nIndicates whether the synchronization operation was …\nRepresents different types of webhook events from Clerk …\nTop-level structure for Clerk webhook payloads.\nDiscord Webhook Models\nRepresents an email address associated with a user in an …\nA new user was created in Clerk.\nRepresents the payload for a user creation webhook event.\nA user was deleted from Clerk.\nRepresents the payload for a user deletion webhook event.\nAn existing user’s information was updated in Clerk.\nRepresents the payload for a user update webhook event.\nStandardized response format for webhook operations.\nThe message contents (up to 2000 characters).\nThe webhook event data, which can be one of several event …\nA boolean flag that’s always <code>true</code> for deletion events. …\nThe actual email address string. This is validated to …\nList of email addresses associated with the user’s …\nCurrent list of email addresses associated with the user. …\nArray of up to 10 embed objects. See Discord’s …\nThe user’s first name, if provided during registration.\nThe user’s current first name, if available.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnique identifier for the user in the authentication …\nUnique identifier for the user in the authentication …\nThe unique identifier of the user who was deleted. This …\nA unique identifier for this email address. This is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe user’s last name, if provided during registration.\nThe user’s current last name, if available.\nA human-readable message describing the outcome of the …\nURL to the user’s profile picture, if available. This …\nCurrent URL to the user’s profile picture, if available.\nIndicates whether the webhook was processed successfully.\nThe user’s username, if they have one set in the …\nThe user’s current username, if available.\nDevpost Profile Scraping Routes\nDiscord Webhook Routes\nImport Routes\nResource Routes\nS3 File Upload Routes\nStatus Routes\nUser Synchronization Routes\nUser Routes\nWaitlist Management Routes\nWebhook Routes\nCreates and returns a router with all Devpost scraping …\nScrapes a Devpost profile and streams progress updates via …\nHandler for POST /api/notify/discord\nCreates and returns a router with all Discord-related …\nCreates and returns a router with all import-related …\nCreates a new item in the specified resource.\nDeletes an item from the specified resource.\nFetches all items from the specified resource for the …\nCreates and returns a router with all resource CRUD …\nUpdates an existing item in the specified resource.\nCreates and returns a router with all S3 file upload …\nHandles file uploads to S3 via multipart form data.\nHealth check endpoint handler.\nCreates and returns a router with all status check …\nCreates and returns a router with all user synchronization …\nSynchronizes all users from Clerk to the application …\nRepresents a profile picture update request.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUpdates the current user’s profile information.\nThe URL pointing to the user’s new profile picture. This …\nCreates and returns a router with all user profile …\nAdds an email address to the waitlist.\nCreates and returns a router with all waitlist management …\nProcesses incoming Clerk webhook events for user …\nCreates and returns a router with all webhook endpoints.\nSends a message to a configured Discord webhook.\nDevpost Profile Scraping Service\nDiscord Service\nEligibility Service\nImport Service\nResource Service\nS3 Service\nUser Synchronization Service\nUser Service\nWaitlist Service\nWebhook Service\nLooks up a user by Clerk user ID or email, creates the …\nScrapes a Devpost profile and reports progress through a …\nService for sending notifications to Discord channels via …\nMaps service errors to appropriate HTTP status codes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance of the Discord service.\nSends a notification to a Discord channel using a webhook.\nDetermines the eligibility of a participant based on …\nError type for CSV processing operations.\nFormats the error message for display.\nReturns the argument unchanged.\nHandles the upload and processing of combined CSV files …\nCalls <code>U::from(self)</code>.\nReads and parses CSV data from a byte buffer into a vector …\nProvides the source of the error, if any.\nA client for interacting with Supabase database resources.\nCreates a new item in the specified resource table.\nDeletes an item from the specified resource table.\nReturns the argument unchanged.\nRetrieves all items from a specified resource table …\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>ResourceService</code> using …\nUpdates an existing item in the specified resource table.\nValidates resource data against the appropriate model.\nUploads a profile picture to S3-compatible storage and …\nService for synchronizing user data between Clerk and …\nMaps service errors to appropriate HTTP status codes.\nFetches all users from Clerk’s API with pagination …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new instance of <code>SyncService</code> using environment …\nSynchronizes all users from Clerk to Supabase.\nSynchronizes a single user’s data to Supabase.\nTransforms a <code>ClerkUser</code> into a <code>UserData</code> structure suitable …\nService for managing user data and authentication.\nReturns the argument unchanged.\nRetrieves a user by their Clerk ID from the database.\nCalls <code>U::from(self)</code>.\nCreates a new <code>UserService</code> instance using environment …\nThe service key for authenticating with Supabase\nThe URL of the Supabase instance (e.g., “…\nService for managing the waitlist and interacting with …\nAdds a new email address to the waitlist.\nMaps service error messages to appropriate HTTP status …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>WaitlistService</code> instance using environment …\nThe service key for authenticating with Supabase\nThe URL of the Supabase instance (e.g., “…\nService for handling webhook events and external service …\nHandles a Clerk ‘user created’ webhook event by …\nHandles a Clerk ‘user deleted’ webhook event.\nMap service error to HTTP status code Map a service error …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>WebhookService</code> instance using environment …\nProcesses an incoming Clerk webhook event for user …\nSend a message to a Discord webhook\nThe service key for the Supabase instance\nThe URL of the Supabase instance (e.g., “…\nHandles a Clerk ‘user updated’ webhook event.\nCSV Processing Module\nEligibility Module\nSonar-PPLX Integration Module\nRepresents the input data for eligibility checks.\nOrganization or institution the registrant is affiliated …\nAge of the registrant (optional)\nCountry Name Normalization\nCSV File Repair and Validation\nReturns the argument unchanged.\nFull name of the registrant\nCalls <code>U::from(self)</code>.\nProject Data Processing Module\nReads records from a CSV file into a vector of the …\nRegistrant Data Normalization\nSocial media or portfolio links provided by the registrant\nWrites records to a CSV file.\nRepresents a country’s statistics from a CSV file.\nName of the country (may be in any language/script)\nReturns a mapping of known country name variants to their …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNormalizes a country name to its canonical English name if …\nGenerates a pretty-printed table of country statistics …\nNumber of registrants from this country\nNumber of submitters from this country\nTruncates a string to a maximum length, adding an ellipsis …\nRepairs and standardizes a CSV file, fixing common …\nCommand-line interface for fixing CSV files.\nParses a single CSV line into individual fields, handling …\nError type for CSV processing operations.\nRepresents a project submission with all associated …\nRepresents a team member associated with a project …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProcesses a CSV file containing project submissions into …\nReads the projects-info.csv file and prints each record to …\nReads CSV data with flexible column handling\nTransforms a raw record into a structured Project\nRepresents a registrant’s information from a CSV file.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConverts a string to title case (first letter of each word …\nTruncates a string to a maximum length, adding an ellipsis …\nEligibility Checks Module\nBatch Eligibility Checking from CSV\nConfiguration for eligibility checks.\nPerforms a generic eligibility check for any criterion …\nList of eligible country names (case-insensitive). If …\nChecks if the participant is from an eligible country.\nChecks if the participant is eligible based on their …\nList of allowed employment statuses (case-insensitive). If …\nChecks if the participant has the necessary equipment for …\nList of required equipment (case-insensitive). If …\nChecks if the participant meets the minimum age …\nMinimum age requirement (in years). If <code>Some(age)</code>, …\nChecks if the participant has already won in previous …\nMaximum number of previous wins allowed. If <code>Some(max_wins)</code>…\nChecks if the participant has the required skills or …\nChecks if the participant can commit the required number …\nRequired time commitment in hours. If <code>Some(hours)</code>, …\nChecks if the participant is enrolled in an accredited …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerforms all standard eligibility checks based on the …\nProcesses a CSV file of participants, runs eligibility …\nParses a CSV file containing hackathon registrant data …\nRepresents structured content from the assistant.\nRepresents a single response choice from the Sonar model.\nRepresents an explanation or note with an associated …\nRepresents a single fact extracted by the model.\nStructured content with facts and optional notes\nRepresents a message in the conversation with the Sonar …\nRepresents the content of a message, which can be either …\nThe default implementation of <code>SonarPplxTrait</code> that makes …\nDefines the interface for interacting with the Sonar model …\nRepresents a request to the Sonar model API.\nThe top-level response from the Sonar model API.\nPlain text content\nCheck participant’s other affiliations\nCheck participant’s age eligibility\nCheck participant’s employment/affiliation eligibility\nCheck participant’s geography eligibility\nThe list of response choices (typically just one)\nThe model’s confidence in this fact (0.0 to 1.0)\nThe content of the message, which can be text or …\nSupporting evidence for the fact\nA map of fact names to fact details\nThe reason the model finished generating this response\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGeneric eligibility check for criteria that do not have a …\nPerforms a generic eligibility check using the Sonar model.\nImplementation of the generic_check method that delegates …\nThe index of this choice in the response\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe message content of this choice\nThe conversation history, including system, user, and …\nThe model to use for the request (e.g., “…\nOptional list of explanatory notes with sources\nSends a query to the Sonar model and returns the response.\nThe role of the message sender (e.g., “system”, “user…\nThe source of the fact (e.g., a URL or document reference)\nThe source of this explanation\nThe explanatory text\nThe value of the fact")